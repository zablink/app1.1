// pages/nearby.tsx
import { useEffect, useState } from "react";

type Store = {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  subdistrict?: string;
  district?: string;
  province?: string;
  distance?: number;
};

type NearbyResult = {
  level: "radius" | "subdistrict" | "district" | "province" | "all";
  stores: Store[];
};

const levelMap = {
  radius: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 5 ‡∏Å‡∏°.",
  subdistrict: "‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡∏ö‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô",
  district: "‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô",
  province: "‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô",
  all: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
};

export default function NearbyPage() {
  const [loading, setLoading] = useState(true);
  const [stores, setStores] = useState<Store[]>([]);
  const [level, setLevel] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!navigator.geolocation) {
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ");
      setLoading(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;

        try {
          const res = await fetch(`/api/stores/nearby?lat=${lat}&lng=${lng}`);
          const data: NearbyResult = await res.json();
          setStores(data.stores);
          setLevel(data.level);
        } catch (err) {
          console.error(err);
          setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤");
        } finally {
          setLoading(false);
        }
      },
      (err) => {
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ");
        setLoading(false);
      }
    );
  }, []);

  if (loading) return <p className="p-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì...</p>;
  if (error) return <p className="p-4 text-red-600">{error}</p>;

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-4">‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì</h1>
      {level && <p className="mb-2 text-gray-700">üîç {levelMap[level as keyof typeof levelMap]}</p>}

      {stores.length === 0 ? (
        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</p>
      ) : (
        <ul className="space-y-2">
          {stores.map((store) => (
            <li key={store.id} className="p-2 border rounded">
              <p className="font-semibold">{store.name}</p>
              {store.distance && (
                <p className="text-sm text-gray-500">‡∏´‡πà‡∏≤‡∏á {store.distance.toFixed(2)} ‡∏Å‡∏°.</p>
              )}
              <p className="text-sm text-gray-600">
                {store.subdistrict} {store.district} {store.province}
              </p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
