import { useEffect, useRef, useState } from "react";
import { createClient } from "@supabase/supabase-js";
//import { useSession } from "next-auth/react";
import { useSession } from '@auth/nextjs'
import dynamic from "next/dynamic";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

// üëá ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Client-only component
function StoreLocationInner() {
  const { data: session, status } = useSession();
  const mapRef = useRef<HTMLDivElement>(null);
  const [marker, setMarker] = useState<google.maps.Marker | null>(null);
  const [location, setLocation] = useState<{ lat: number; lng: number } | null>(null);

  useEffect(() => {
    if (status !== "authenticated") return;
    if (!window.google || !mapRef.current) return;

    const defaultCenter = { lat: 13.7563, lng: 100.5018 };

    const mapInstance = new google.maps.Map(mapRef.current, {
      center: defaultCenter,
      zoom: 13,
    });

    mapInstance.addListener("click", (e: google.maps.MapMouseEvent) => {
      const pos = { lat: e.latLng!.lat(), lng: e.latLng!.lng() };
      setLocation(pos);

      if (marker) marker.setMap(null);

      const newMarker = new google.maps.Marker({
        position: pos,
        map: mapInstance,
        draggable: true,
      });

      newMarker.addListener("dragend", () => {
        const p = newMarker.getPosition();
        if (p) setLocation({ lat: p.lat(), lng: p.lng() });
      });

      setMarker(newMarker);
    });
  }, [marker, status]);

  const saveLocation = async () => {
    if (!location || !session?.user?.id) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô");

    const { error } = await supabase
      .from("stores")
      .update({ latitude: location.lat, longitude: location.lng })
      .eq("user_id", session.user.id); // ‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏ó‡∏ô email

    if (error) alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    else alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  };

  if (status === "loading") return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;
  if (status === "unauthenticated") return <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>;

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-2">‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
      <div ref={mapRef} style={{ width: "100%", height: "400px" }} className="mb-4" />
      {location && (
        <p className="mb-2">
          ‡∏û‡∏¥‡∏Å‡∏±‡∏î: lat {location.lat.toFixed(5)}, lng {location.lng.toFixed(5)}
        </p>
      )}
      <button
        onClick={saveLocation}
        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
      >
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      </button>
    </div>
  );
}

// üëá ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SSR ‡πÇ‡∏î‡∏¢‡πÇ‡∏´‡∏•‡∏î component ‡πÅ‡∏ö‡∏ö client-only ‡∏î‡πâ‡∏ß‡∏¢ dynamic import
export default dynamic(() => Promise.resolve(StoreLocationInner), {
  ssr: false,
});
